import { createEntityAdapter, createSelector } from '@reduxjs/toolkit';
import { apiSlice } from '../../app/api/apiSlice';

// Create an entity adapter to manage user data in the Redux store
const usersAdapter = createEntityAdapter({});

// Define the initial state for the user data using the entity adapter
const initialState = usersAdapter.getInitialState();

// Create an API slice for managing user-related data
export const usersApiSlice = apiSlice.injectEndpoints({
  endpoints: (builder) => ({
    getUsers: builder.query({
      query: () => '/users',
      validateStatus: (response, result) => {
        return response.status === 200 && !result.isError;
      },
      transformResponse: (responseData) => {
        // Transform the response data by mapping '_id' to 'id' and set it in the Redux store
        const loadedUsers = responseData.map((user) => {
          user.id = user._id;
          return user;
        });
        // Set all users in the Redux store
        return usersAdapter.setAll(initialState, loadedUsers);
      },
      providesTags: (result, error, arg) => {
        if (result?.ids) {
          return [
            { type: 'User', id: 'List' }, // Tags to identify the list of users
            // Individual user tags
            ...result.ids.map((id) => ({ type: 'User', id })),
          ];
        }
        // Default tag for the user list
        else return [{ type: 'User', id: 'List' }];
      },
    }),

    // Define an API mutation to add a new user
    addNewUser: builder.mutation({
      query: ({ newUser }) => ({
        url: '/users',
        method: 'POST',
        body: { ...newUser },
      }),
      // Invalidate the user list tag
      invalidatesTags: [{ type: 'User', id: 'List' }],
    }),

    // Define an API mutation to update an existing user
    updateUser: builder.mutation({
      query: ({ newUser, id }) => ({
        url: `/users/${id}`,
        method: 'PATCH',
        body: { ...newUser },
      }),
      // Invalidate the specific user's tag
      invalidatesTags: (result, error, arg) => [{ type: 'User', id: arg.id }],
    }),

    // Define an API mutation to delete an existing user
    deleteUser: builder.mutation({
      query: ({ id }) => ({
        url: `/users/${id}`,
        method: 'DELETE',
      }),
      // Invalidate the specific user's tag
      invalidatesTags: (result, error, arg) => [{ type: 'User', id: arg.id }],
    }),
  }),
});

// Export hooks generated by the API slice for use in components
export const {
  useGetUsersQuery,
  useAddNewUserMutation,
  useUpdateUserMutation,
  useDeleteUserMutation,
} = usersApiSlice;

// Select the result of the 'getUsers' query
export const selectUsersResult = usersApiSlice.endpoints.getUsers.select();

// Create a selector to retrieve user data from the result
const selectUsersData = createSelector(
  selectUsersResult,
  (usersResult) => usersResult.data
);

// Export selectors generated by the entity adapter for use in components
export const {
  selectAll: selectAllUsers, // Select all users
  selectById: selectUserById, // Select a user by ID
  selectIds: selectUserIds, // Select user IDs
} = usersAdapter.getInitialState((state) => selectUsersData(state) ?? initialState);
